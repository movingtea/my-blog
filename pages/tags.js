import getAllTags from "../libs/tags";
import {Avatar, Button, Chip, Container, Grid, Link} from "@mui/material";
import Head from 'next/head'
import Layout from "../compontents/Layout/Layout";
import HeaderBlock from "../compontents/HeaderBlock/HeaderBlock";
import styles from '../styles/tags.module.css'
import {useState} from "react";
import {filterTag} from "../libs/articles";
import {Paper} from "@material-ui/core";
import Image from "next/image";
import {useRouter} from "next/router";
import SearchBar from "../compontents/SearchBar/SearchBar";

export default function Tags(data) {
    const router = useRouter()
    const topTags = (JSON.parse(data.tags).data)
    const [urlTag, setUrlTag] = useState(router.query.tag) //tag in URL query
    const [tagToQuery, setTagToQuery] = useState(router.query.tag)
    const [filteredArticles, setFilteredArticles] = useState([])
    const [pagination, setPagination] = useState({
        limit: 0,
        total: 0
    })
    const [startFrom, setStartFrom] = useState(0)

    if (urlTag) {
        //console.log(router.query.tag)
        //filterByTags(tagToQuery, 0)
        filterTag(urlTag, 0).then(result => {
            setUrlTag(null)
            setFilteredArticles(result.data)
            setPagination({
                limit: result.pagination.limit,
                total: result.pagination.total
            })
        })
    }

    const handleClickTag = async (tag) => {
        setStartFrom(0)
        setFilteredArticles([])
        setTagToQuery(tag)
        await filterTag(tag, 0).then(result => {
            setFilteredArticles(result.data)
            setPagination({
                limit: result.pagination.limit,
                total: result.pagination.total
            })
        })
        await router.push({
            pathname: '/tags',
            query: {tag: tag}
        })
    }

    const handleLoadMore = async () => {
        if (filteredArticles.length < pagination.total) {
            const fetchMore = await filterTag(tagToQuery, pagination.limit + startFrom)
            console.log('get more', fetchMore)
            console.log('total', pagination.total)
            setStartFrom(fetchMore.pagination.limit + startFrom)
            setFilteredArticles(filteredArticles.concat(fetchMore.data))
        }
    }

    return (
        <Container maxWidth={'xl'} disableGutters>
            <Head>
                <title>标签</title>
                <meta name="description" content="Generated by Guo Liang"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <HeaderBlock/>
            <Layout>
                <SearchBar/>
                <Grid container spacing={2} justifyContent={'center'} className={styles.tagsContainer}>
                    {topTags.map(tag => {

                        const numberIcon =
                            <Avatar className={styles.tagIcon} sx={{pointerEvents: "none", cursor: "not-allowed"}}>
                                {tag.usedTime}
                            </Avatar>

                        return (
                            <Grid item key={tag.id}>
                                <Chip variant={tagToQuery === tag.tagName ? "filled" : "outlined"}
                                      color={tagToQuery === tag.tagName ? "info" : "default"}
                                      label={`${tag.tagName}`} avatar={numberIcon} id={tag.id}
                                      onClick={() => handleClickTag(tag.tagName)}
                                      href={"#filterResult"}/>
                            </Grid>
                        )
                    })}
                </Grid>
                <Grid container justifyContent={'flex-start'} className={styles.filterResultContainer} columnSpacing={4}
                      rowSpacing={4} id={'filterResult'} name={'filterResult'}>
                    {filteredArticles.map(article => (
                        <Grid item key={article.id} md={4}>
                            <Paper elevation={8} className={styles.article}>
                                <div className={styles.cover}>
                                    <Image src={`${process.env.API_BASE_URL}${article.cover}`} width={'100%'}
                                           height={'100%'}
                                           layout={'responsive'} objectFit={'cover'} alt={`${article.title}`}
                                           loading={'lazy'}/>
                                </div>
                                <div className={styles.articleInfo}>
                                    <div className={styles.category}>
                                        {article.category}
                                    </div>
                                    <Link href={`/articles/${article.slug}`} className={styles.title}
                                          color={'inherit'} underline={'hover'}>
                                        {article.title}
                                    </Link>
                                    <div className={styles.description}>
                                        {article.description}
                                    </div>
                                </div>
                            </Paper>
                        </Grid>
                    ))}

                </Grid>
                {filteredArticles.length < pagination.total &&
                <Button onClick={handleLoadMore}>查看更多</Button>
                }

            </Layout>
        </Container>
    )
}


export async function getServerSideProps() {
    const tags = await getAllTags()
    return {
        props: {
            tags: tags
        }
    }
}